<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1443925328472">{:repl-history {:ide [], :local [&quot;(encode \&quot;scone\&quot; \&quot;meetm\&quot;)&quot; &quot;(alpha-index \\e)&quot; &quot;(alpha-index \\s)&quot; &quot;(alpha-index \\m)&quot; &quot;(defn roll [index]\n    (- 25 (mod (Math/abs index) 25)))&quot; &quot;(roll 25)&quot; &quot;(roll 29)&quot; &quot;(roll -1)&quot; &quot;(mod 25 25)&quot; &quot;(mod 25 26)&quot; &quot;(mod -1 25)&quot; &quot;(mod 26 25)&quot; &quot;(mod 29 25)&quot; &quot;(mod 47 25)&quot; &quot;(mod -21 25)&quot; &quot;(mod 21 25)&quot; &quot;(int 4 /25)&quot; &quot;(int 4 )&quot; &quot;(int (/ 4 25))&quot; &quot;(int (/ 22 25))&quot; &quot;(int (/ 12 25))&quot; &quot;(nth-alpha 29)&quot; &quot;(nth-alpha -9)&quot; &quot;(map * (cycle '(2)) '(1 2 3))&quot; &quot;(map * (cycle '(2)) '(1 2 3 4))&quot; &quot;(map * (cycle '(2)) '(1 2 3 4 6))&quot; &quot;(defn nth-alpha [index]\n  (nth (char-array \&quot;abcdefghijklmnopqrstuvwxyz\&quot;)\n       (mod index 26)))&quot; &quot;(encode \&quot;scones\&quot; \&quot;meetmebythetree\&quot;)&quot; &quot;(defn cy [k m]\n  (nth-alpha (- (alpha-index m) (alpha-index k))))&quot; &quot;(distint '(1 2 3 4 5))&quot; &quot;(distinct '(1 2 3 4 5))&quot; &quot;(distinct \&quot;vigilancevigilancevigilancevigila\&quot;)&quot; &quot;(distinct \&quot;scones\&quot;)&quot; &quot;(re-find #\&quot;adc\&quot; \&quot;abcabcacb\&quot;)&quot; &quot;(re-find #\&quot;abc\&quot; \&quot;abcabcacb\&quot;)&quot; &quot;(re-groups #\&quot;abc\&quot; \&quot;abcabcabc\&quot;)&quot; &quot;(re-find (re-matcher #\&quot;abc\&quot; \&quot;abcabcabc\&quot;))&quot; &quot;(re-groups (re-matcher #\&quot;abc\&quot; \&quot;abcabcabc\&quot;))&quot; &quot;(re-groups (re-matcher #\&quot;(abc)\&quot; \&quot;abcabcabc\&quot;))&quot; &quot;(re-groups (re-matches #\&quot;(abc).*\&quot; \&quot;abcabcabc\&quot;))&quot; &quot;(re-matches #\&quot;abc\&quot; \&quot;abc\&quot;)&quot; &quot;(re-matches #\&quot;abc\&quot; \&quot;abcabc\&quot;)&quot; &quot;(re-matches #\&quot;(abc).*\&quot; \&quot;abcabc\&quot;)&quot; &quot;(re-matcher (re-pattern abc) \&quot;abcabc\&quot;)&quot; &quot;(re-matcher (re-pattern \&quot;abc\&quot;) \&quot;abcabc\&quot;)&quot; &quot;(take 2 (re-matcher (re-pattern \&quot;abc\&quot;) \&quot;abcabc\&quot;))&quot; &quot;(do (def matcher (re-matcher (re-pattern \&quot;abc\&quot;) \&quot;abcabc\&quot;))\n    (re-find matcher))&quot; &quot;(do (def matcher (re-matcher (re-pattern \&quot;abc\&quot;) \&quot;abcabc\&quot;))\n    (re-find matcher)\n    (re-find matcher))&quot; &quot;(do (def matcher (re-matcher (re-pattern \&quot;abc\&quot;) \&quot;abc\&quot;))\n    (re-find matcher)\n    (empty? (re-find matcher)))&quot; &quot;(do (def matcher (re-matcher (re-pattern \&quot;abc\&quot;) \&quot;abcabc\&quot;))\n    (re-find matcher)\n    (empty? (re-find matcher)))&quot; &quot;(do (def matcher (re-matcher (re-pattern \&quot;abc\&quot;) \&quot;abcabc\&quot;))\n    (re-find matcher)\n    (nil? (re-find matcher)))&quot; &quot;(do (def matcher (re-matcher (re-pattern \&quot;abc\&quot;) \&quot;abc\&quot;))\n    (re-find matcher)\n    (nil? (re-find matcher)))&quot; &quot;(decycle-word [\&quot;HelloHello\&quot;])&quot; &quot;(take 5 \&quot;Hello\&quot;)&quot; &quot;(apply str (take 5 \&quot;Hello\&quot;))&quot; &quot;(decycle-word \&quot;HelloHello\&quot;)&quot; &quot;(decycle\n  \&quot;HelloHello\&quot;)&quot; &quot;(decycle\n  \&quot;HelloH\&quot;)&quot; &quot;(decycle\n  \&quot;HelloHo\&quot;)&quot; &quot;(decycle\n  \&quot;HelloHel\&quot;)&quot; &quot;(rough-decycle \&quot;Hello\&quot;)&quot; &quot;(decycle\n  \&quot;Hello\&quot;)&quot; &quot;(decypher \&quot;hellohellohelo\&quot;)&quot; &quot;(decycle \&quot;hellohellohelo\&quot;)&quot; &quot;(defn decypher [cypher message]\n  \&quot;decypherme\&quot;\n  (decycle (apply str (map cy (cycle cypher) message))))&quot; &quot;(decypher opkyfipmfmwcvqoklyhxywgeecpvhelzg thequickbrownfoxjumpsoveralazydog)&quot; &quot;(decypher \&quot;opkyfipmfmwcvqoklyhxywgeecpvhelzg\&quot; \&quot;thequickbrownfoxjumpsoveralazydog\&quot;)&quot; &quot;(clean-tail \&quot;HelloH\&quot;)&quot; &quot;(clean-tail \&quot;HelloHello\&quot;)&quot; &quot;()&quot; &quot;(clean-tail \&quot;HelloHell\&quot;)&quot; &quot;(clean-tail \&quot;HelloHelloHell\&quot;)&quot; &quot;(contains? \&quot;Hello\&quot; \&quot;Hel\&quot;)&quot; &quot;(in? \&quot;Hello\&quot; \&quot;o\&quot;\n     \n     )&quot; &quot;(in? \&quot;Hello\&quot; \&quot;H\&quot;)&quot; &quot;(in? \&quot;Hello\&quot; \&quot;a\&quot;)&quot; &quot;(in? \&quot;Hello\&quot; \&quot;o\&quot;)&quot; &quot;(in? \&quot;Hello\&quot; \&quot;lo\&quot;)&quot; &quot;(in? \&quot;Hello\&quot; \&quot;allo\&quot;)&quot; &quot;(in? \&quot;Hello\&quot; \&quot;llo\&quot;)&quot; &quot;(decycle-word \&quot;HelloHel\&quot;)&quot; &quot;(decycle \&quot;HelloHel\&quot;)&quot; &quot;(decycle \&quot;HelloHell\&quot;)&quot; &quot;(decycle \&quot;Hello\&quot;)&quot; &quot;(decycle \&quot;HelloH\&quot;)&quot; &quot;(decycle \&quot;HelloHello\&quot;)&quot; &quot;(decycle \&quot;HelloHelloH\&quot;)&quot; &quot;(decycle \&quot;Scones\&quot;)&quot; &quot;(decycle \&quot;SconeS\&quot;)&quot; &quot;(decycle \&quot;scones\&quot;)&quot; &quot;(decycle \&quot;sconessconessconessconessconessc\&quot;)&quot; &quot;(decycle \&quot;helloh\&quot;)&quot; &quot;(decycle \&quot;hellohelloh\&quot;)&quot; &quot;(decycle \&quot;hellohellozhellohelloz\&quot;)&quot; &quot;(de-cycle \&quot;sconesc\&quot;)&quot; &quot;(de-cycle \&quot;sconesco\&quot;)&quot; &quot;(de-cycle \&quot;sconessco\&quot;)&quot; &quot;(de-cycle \&quot;sconessc\&quot;)&quot; &quot;(de-cycle \&quot;sconess\&quot;)&quot; &quot;(doc +)&quot; &quot;(de-cycle \&quot;lalala\&quot;)&quot;], :remote []}}</component>
</project>